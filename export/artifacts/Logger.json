{
  "contractName": "Logger",
  "sourceName": "contracts/Logger.sol",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes8[]",
          "name": "_data",
          "type": "bytes8[]"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_log2Size",
          "type": "uint64"
        }
      ],
      "name": "MerkleRootCalculatedFromData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_log2Size",
          "type": "uint64"
        }
      ],
      "name": "MerkleRootCalculatedFromHistory",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_log2Size",
          "type": "uint64"
        },
        {
          "internalType": "bytes8[]",
          "name": "_data",
          "type": "bytes8[]"
        }
      ],
      "name": "calculateMerkleRootFromData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_log2Size",
          "type": "uint64"
        },
        {
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        }
      ],
      "name": "calculateMerkleRootFromHistory",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "getLogIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getLogRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_log2Size",
          "type": "uint64"
        }
      ],
      "name": "isLogAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x6080604052600060045534801561001557600080fd5b50610e67806100256000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806326987b60146100675780634891ea36146100815780636a22e5fd14610134578063833459bc14610151578063a1ddff261461016e578063adaea8dc14610221575b600080fd5b61006f610261565b60408051918252519081900360200190f35b61006f6004803603604081101561009757600080fd5b6001600160401b0382351691908101906040810160208201356401000000008111156100c257600080fd5b8201836020820111156100d457600080fd5b803590602001918460208302840111640100000000831117156100f657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610267945050505050565b61006f6004803603602081101561014a57600080fd5b5035610773565b61006f6004803603602081101561016757600080fd5b50356107c8565b61006f6004803603604081101561018457600080fd5b6001600160401b0382351691908101906040810160208201356401000000008111156101af57600080fd5b8201836020820111156101c157600080fd5b803590602001918460208302840111640100000000831117156101e357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506107da945050505050565b61024d6004803603604081101561023757600080fd5b50803590602001356001600160401b0316610cc5565b604080519115158252519081900360200190f35b60045481565b60006003836001600160401b031610156102c8576040805162461bcd60e51b815260206004820152601b60248201527f48617320746f206265206174206c65617374206f6e6520776f72640000000000604482015290519081900360640190fd5b6040836001600160401b031611156103115760405162461bcd60e51b8152600401808060200182810382526028815260200180610de46028913960400191505060405180910390fd5b6000825111610367576040805162461bcd60e51b815260206004820152601f60248201527f54686520696e7075742061727261792063616e6e6f7420626520656d70747900604482015290519081900360640190fd5b815182906001600160401b036002198601811660020a16908110156103bd5760405162461bcd60e51b8152600401808060200182810382526031815260200180610d2f6031913960400191505060405180910390fd5b8084511461049a576060816001600160401b03811180156103dd57600080fd5b50604051908082528060200260200182016040528015610407578160200160208202803683370190505b50905060005b85518110156104575785818151811061042257fe5b602002602001015182828151811061043657fe5b6001600160c01b03199092166020928302919091019091015260010161040d565b5084515b815181101561049657600060c01b82828151811061047557fe5b6001600160c01b03199092166020928302919091019091015260010161045b565b5091505b606082516001600160401b03811180156104b357600080fd5b506040519080825280602002602001820160405280156104dd578160200160208202803683370190505b50905060005b835181101561054f578381815181106104f857fe5b602002602001015160405160200180826001600160c01b03191681526008019150506040516020818303038152906040528051906020012082828151811061053c57fe5b60209081029190910101526001016104e3565b50600073__$c7dbd794b8c7b5c2028db781007df1176e$__6382b0eab8836040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019060200280838360005b838110156105bc5781810151838201526020016105a4565b505050509050019250505060206040518083038186803b1580156105df57600080fd5b505af41580156105f3573d6000803e3d6000fd5b505050506040513d602081101561060957600080fd5b50516040805180820182526001600160401b038a8116808352602080840186815260038054600181018255600091825295517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b6002909702968701805467ffffffffffffffff19169190961617909455517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c909401939093556004548451808501929092528482528b51948201949094528a5194955085947f5fdb13b5e276437af6afb5d6bede9cf90cb8cd2f13c93048434bf9fcf7284622938c938e93928392606084019287820192909102908190849084905b838110156107165781810151838201526020016106fe565b50505050905001935050505060405180910390a3600081815260208181526040808320805460ff19166001908117909155600480548285528386208190558552600290935292208390558054909101905593505050505b92915050565b600060045482106107b55760405162461bcd60e51b8152600401808060200182810382526026815260200180610e0c6026913960400191505060405180910390fd5b5060009081526002602052604090205490565b60009081526001602052604090205490565b600073__$c7dbd794b8c7b5c2028db781007df1176e$__63d82ae4b183516040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561082c57600080fd5b505af4158015610840573d6000803e3d6000fd5b505050506040513d602081101561085657600080fd5b50516108935760405162461bcd60e51b8152600401808060200182810382526030815260200180610d866030913960400191505060405180910390fd5b60005b8251811015610974578281815181106108ab57fe5b6020026020010151600454116108f25760405162461bcd60e51b8152600401808060200182810382526026815260200180610d606026913960400191505060405180910390fd5b600383828151811061090057fe5b60200260200101518154811061091257fe5b60009182526020909120600290910201546001600160401b0385811691161461096c5760405162461bcd60e51b815260040180806020018281038252602e815260200180610db6602e913960400191505060405180910390fd5b600101610896565b50606082516001600160401b038111801561098e57600080fd5b506040519080825280602002602001820160405280156109b8578160200160208202803683370190505b50905060005b8351811015610a185760038482815181106109d557fe5b6020026020010151815481106109e757fe5b906000526020600020906002020160010154828281518110610a0557fe5b60209081029190910101526001016109be565b50600073__$c7dbd794b8c7b5c2028db781007df1176e$__6382b0eab8836040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019060200280838360005b83811015610a85578181015183820152602001610a6d565b505050509050019250505060206040518083038186803b158015610aa857600080fd5b505af4158015610abc573d6000803e3d6000fd5b505050506040513d6020811015610ad257600080fd5b50518451604080516306c8e54b60e01b815260048101929092525191925060009173__$c7dbd794b8c7b5c2028db781007df1176e$__916306c8e54b916024808301926020929190829003018186803b158015610b2e57600080fd5b505af4158015610b42573d6000803e3d6000fd5b505050506040513d6020811015610b5857600080fd5b505160408051808201825260ff9092168881016001600160401b03818116808652602080870189815260038054600181018255600091825298517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b6002909a02998a01805467ffffffffffffffff19169190961617909455517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c909701969096556004548551808801929092528582528b51958201959095528a5193965087957f89cefba87d8a8fa0db60ec3681079c7740b90465999c62cd7c00d65d3c9e57a9948c949383926060840192878201929102908190849084905b83811015610c6a578181015183820152602001610c52565b50505050905001935050505060405180910390a350600081815260208181526040808320805460ff19166001908117909155600480548285528386208190558552600290935292208390558054909101905591505092915050565b60008281526020819052604081205460ff1615610d2557600083815260016020526040902054600380546001600160401b03851692908110610d0357fe5b60009182526020909120600290910201546001600160401b031614905061076d565b5060009291505056fe54686520696e70757420617272617920697320626967676572207468616e206465636c61726564206c6f67322073697a6554686520696e646578206f6620686973746f727920646f65736e27742065786973742079657454686520696e707574206172726179206d75737420636f6e7461696e20706f776572206f66203220656c656d656e74735468652076616c7565206f66206c6f673253697a6520646f65736e2774206d6174636820696e20686973746f727943616e6e6f7420626520626967676572207468616e20746865206d616368696e6520697473656c6654686520696e64657820646f65736e277420657869737420696e2074686520686973746f7279a26469706673582212202f48c8b2c30525fb5221e8db0b7ece0814730e62f50a55c544d3178124ffa77b64736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806326987b60146100675780634891ea36146100815780636a22e5fd14610134578063833459bc14610151578063a1ddff261461016e578063adaea8dc14610221575b600080fd5b61006f610261565b60408051918252519081900360200190f35b61006f6004803603604081101561009757600080fd5b6001600160401b0382351691908101906040810160208201356401000000008111156100c257600080fd5b8201836020820111156100d457600080fd5b803590602001918460208302840111640100000000831117156100f657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610267945050505050565b61006f6004803603602081101561014a57600080fd5b5035610773565b61006f6004803603602081101561016757600080fd5b50356107c8565b61006f6004803603604081101561018457600080fd5b6001600160401b0382351691908101906040810160208201356401000000008111156101af57600080fd5b8201836020820111156101c157600080fd5b803590602001918460208302840111640100000000831117156101e357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506107da945050505050565b61024d6004803603604081101561023757600080fd5b50803590602001356001600160401b0316610cc5565b604080519115158252519081900360200190f35b60045481565b60006003836001600160401b031610156102c8576040805162461bcd60e51b815260206004820152601b60248201527f48617320746f206265206174206c65617374206f6e6520776f72640000000000604482015290519081900360640190fd5b6040836001600160401b031611156103115760405162461bcd60e51b8152600401808060200182810382526028815260200180610de46028913960400191505060405180910390fd5b6000825111610367576040805162461bcd60e51b815260206004820152601f60248201527f54686520696e7075742061727261792063616e6e6f7420626520656d70747900604482015290519081900360640190fd5b815182906001600160401b036002198601811660020a16908110156103bd5760405162461bcd60e51b8152600401808060200182810382526031815260200180610d2f6031913960400191505060405180910390fd5b8084511461049a576060816001600160401b03811180156103dd57600080fd5b50604051908082528060200260200182016040528015610407578160200160208202803683370190505b50905060005b85518110156104575785818151811061042257fe5b602002602001015182828151811061043657fe5b6001600160c01b03199092166020928302919091019091015260010161040d565b5084515b815181101561049657600060c01b82828151811061047557fe5b6001600160c01b03199092166020928302919091019091015260010161045b565b5091505b606082516001600160401b03811180156104b357600080fd5b506040519080825280602002602001820160405280156104dd578160200160208202803683370190505b50905060005b835181101561054f578381815181106104f857fe5b602002602001015160405160200180826001600160c01b03191681526008019150506040516020818303038152906040528051906020012082828151811061053c57fe5b60209081029190910101526001016104e3565b50600073__$c7dbd794b8c7b5c2028db781007df1176e$__6382b0eab8836040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019060200280838360005b838110156105bc5781810151838201526020016105a4565b505050509050019250505060206040518083038186803b1580156105df57600080fd5b505af41580156105f3573d6000803e3d6000fd5b505050506040513d602081101561060957600080fd5b50516040805180820182526001600160401b038a8116808352602080840186815260038054600181018255600091825295517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b6002909702968701805467ffffffffffffffff19169190961617909455517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c909401939093556004548451808501929092528482528b51948201949094528a5194955085947f5fdb13b5e276437af6afb5d6bede9cf90cb8cd2f13c93048434bf9fcf7284622938c938e93928392606084019287820192909102908190849084905b838110156107165781810151838201526020016106fe565b50505050905001935050505060405180910390a3600081815260208181526040808320805460ff19166001908117909155600480548285528386208190558552600290935292208390558054909101905593505050505b92915050565b600060045482106107b55760405162461bcd60e51b8152600401808060200182810382526026815260200180610e0c6026913960400191505060405180910390fd5b5060009081526002602052604090205490565b60009081526001602052604090205490565b600073__$c7dbd794b8c7b5c2028db781007df1176e$__63d82ae4b183516040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561082c57600080fd5b505af4158015610840573d6000803e3d6000fd5b505050506040513d602081101561085657600080fd5b50516108935760405162461bcd60e51b8152600401808060200182810382526030815260200180610d866030913960400191505060405180910390fd5b60005b8251811015610974578281815181106108ab57fe5b6020026020010151600454116108f25760405162461bcd60e51b8152600401808060200182810382526026815260200180610d606026913960400191505060405180910390fd5b600383828151811061090057fe5b60200260200101518154811061091257fe5b60009182526020909120600290910201546001600160401b0385811691161461096c5760405162461bcd60e51b815260040180806020018281038252602e815260200180610db6602e913960400191505060405180910390fd5b600101610896565b50606082516001600160401b038111801561098e57600080fd5b506040519080825280602002602001820160405280156109b8578160200160208202803683370190505b50905060005b8351811015610a185760038482815181106109d557fe5b6020026020010151815481106109e757fe5b906000526020600020906002020160010154828281518110610a0557fe5b60209081029190910101526001016109be565b50600073__$c7dbd794b8c7b5c2028db781007df1176e$__6382b0eab8836040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019060200280838360005b83811015610a85578181015183820152602001610a6d565b505050509050019250505060206040518083038186803b158015610aa857600080fd5b505af4158015610abc573d6000803e3d6000fd5b505050506040513d6020811015610ad257600080fd5b50518451604080516306c8e54b60e01b815260048101929092525191925060009173__$c7dbd794b8c7b5c2028db781007df1176e$__916306c8e54b916024808301926020929190829003018186803b158015610b2e57600080fd5b505af4158015610b42573d6000803e3d6000fd5b505050506040513d6020811015610b5857600080fd5b505160408051808201825260ff9092168881016001600160401b03818116808652602080870189815260038054600181018255600091825298517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b6002909a02998a01805467ffffffffffffffff19169190961617909455517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c909701969096556004548551808801929092528582528b51958201959095528a5193965087957f89cefba87d8a8fa0db60ec3681079c7740b90465999c62cd7c00d65d3c9e57a9948c949383926060840192878201929102908190849084905b83811015610c6a578181015183820152602001610c52565b50505050905001935050505060405180910390a350600081815260208181526040808320805460ff19166001908117909155600480548285528386208190558552600290935292208390558054909101905591505092915050565b60008281526020819052604081205460ff1615610d2557600083815260016020526040902054600380546001600160401b03851692908110610d0357fe5b60009182526020909120600290910201546001600160401b031614905061076d565b5060009291505056fe54686520696e70757420617272617920697320626967676572207468616e206465636c61726564206c6f67322073697a6554686520696e646578206f6620686973746f727920646f65736e27742065786973742079657454686520696e707574206172726179206d75737420636f6e7461696e20706f776572206f66203220656c656d656e74735468652076616c7565206f66206c6f673253697a6520646f65736e2774206d6174636820696e20686973746f727943616e6e6f7420626520626967676572207468616e20746865206d616368696e6520697473656c6654686520696e64657820646f65736e277420657869737420696e2074686520686973746f7279a26469706673582212202f48c8b2c30525fb5221e8db0b7ece0814730e62f50a55c544d3178124ffa77b64736f6c63430007040033",
  "linkReferences": {
    "@cartesi/util/contracts/Merkle.sol": {
      "Merkle": [
        {
          "length": 20,
          "start": 1401
        },
        {
          "length": 20,
          "start": 2051
        },
        {
          "length": 20,
          "start": 2626
        },
        {
          "length": 20,
          "start": 2842
        }
      ]
    }
  },
  "deployedLinkReferences": {
    "@cartesi/util/contracts/Merkle.sol": {
      "Merkle": [
        {
          "length": 20,
          "start": 1364
        },
        {
          "length": 20,
          "start": 2014
        },
        {
          "length": 20,
          "start": 2589
        },
        {
          "length": 20,
          "start": 2805
        }
      ]
    }
  },
  "devdoc": {
    "author": "Stephen Chen",
    "details": "This contract is not well-tested yet.",
    "kind": "dev",
    "methods": {},
    "title": "Logger",
    "version": 1
  },
  "evm": {
    "bytecode": {
      "generatedSources": [],
      "linkReferences": {
        "@cartesi/util/contracts/Merkle.sol": {
          "Merkle": [
            {
              "length": 20,
              "start": 1401
            },
            {
              "length": 20,
              "start": 2051
            },
            {
              "length": 20,
              "start": 2626
            },
            {
              "length": 20,
              "start": 2842
            }
          ]
        }
      },
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x4 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE67 DUP1 PUSH2 0x25 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x26987B60 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x4891EA36 EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0x6A22E5FD EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0x833459BC EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0xA1DDFF26 EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0xADAEA8DC EQ PUSH2 0x221 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F PUSH2 0x261 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x6F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 CALLDATALOAD AND SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x267 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x6F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x773 JUMP JUMPDEST PUSH2 0x6F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x167 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x7C8 JUMP JUMPDEST PUSH2 0x6F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 CALLDATALOAD AND SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x7DA SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x24D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH2 0xCC5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND LT ISZERO PUSH2 0x2C8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x48617320746F206265206174206C65617374206F6E6520776F72640000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT ISZERO PUSH2 0x311 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xDE4 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD GT PUSH2 0x367 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520696E7075742061727261792063616E6E6F7420626520656D70747900 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 MLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x2 NOT DUP7 ADD DUP2 AND PUSH1 0x2 EXP AND SWAP1 DUP2 LT ISZERO PUSH2 0x3BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xD2F PUSH1 0x31 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP5 MLOAD EQ PUSH2 0x49A JUMPI PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x407 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x457 JUMPI DUP6 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x422 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x436 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x40D JUMP JUMPDEST POP DUP5 MLOAD JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x496 JUMPI PUSH1 0x0 PUSH1 0xC0 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x475 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x45B JUMP JUMPDEST POP SWAP2 POP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4DD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x54F JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4F8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x8 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x53C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4E3 JUMP JUMPDEST POP PUSH1 0x0 PUSH20 0x0 PUSH4 0x82B0EAB8 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5BC JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x5A4 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x5F3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x609 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP11 DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD DUP7 DUP2 MSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE SWAP6 MLOAD PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B PUSH1 0x2 SWAP1 SWAP8 MUL SWAP7 DUP8 ADD DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND SWAP2 SWAP1 SWAP7 AND OR SWAP1 SWAP5 SSTORE MLOAD PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85C SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x4 SLOAD DUP5 MLOAD DUP1 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP5 DUP3 MSTORE DUP12 MLOAD SWAP5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP11 MLOAD SWAP5 SWAP6 POP DUP6 SWAP5 PUSH32 0x5FDB13B5E276437AF6AFB5D6BEDE9CF90CB8CD2F13C93048434BF9FCF7284622 SWAP4 DUP13 SWAP4 DUP15 SWAP4 SWAP3 DUP4 SWAP3 PUSH1 0x60 DUP5 ADD SWAP3 DUP8 DUP3 ADD SWAP3 SWAP1 SWAP2 MUL SWAP1 DUP2 SWAP1 DUP5 SWAP1 DUP5 SWAP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x716 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x6FE JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x4 DUP1 SLOAD DUP3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP2 SWAP1 SSTORE DUP6 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP3 KECCAK256 DUP4 SWAP1 SSTORE DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE SWAP4 POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD DUP3 LT PUSH2 0x7B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xE0C PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0x0 PUSH4 0xD82AE4B1 DUP4 MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x82C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x840 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x856 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x893 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xD86 PUSH1 0x30 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x974 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x8AB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x4 SLOAD GT PUSH2 0x8F2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xD60 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x900 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0x912 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ PUSH2 0x96C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xDB6 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x896 JUMP JUMPDEST POP PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x98E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9B8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0xA18 JUMPI PUSH1 0x3 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9D5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0x9E7 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA05 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x9BE JUMP JUMPDEST POP PUSH1 0x0 PUSH20 0x0 PUSH4 0x82B0EAB8 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA85 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xA6D JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xABC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xAD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD DUP5 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x6C8E54B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE MLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH20 0x0 SWAP2 PUSH4 0x6C8E54B SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xB42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0xFF SWAP1 SWAP3 AND DUP9 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x20 DUP1 DUP8 ADD DUP10 DUP2 MSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE SWAP9 MLOAD PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B PUSH1 0x2 SWAP1 SWAP11 MUL SWAP10 DUP11 ADD DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND SWAP2 SWAP1 SWAP7 AND OR SWAP1 SWAP5 SSTORE MLOAD PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85C SWAP1 SWAP8 ADD SWAP7 SWAP1 SWAP7 SSTORE PUSH1 0x4 SLOAD DUP6 MLOAD DUP1 DUP9 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP6 DUP3 MSTORE DUP12 MLOAD SWAP6 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE DUP11 MLOAD SWAP4 SWAP7 POP DUP8 SWAP6 PUSH32 0x89CEFBA87D8A8FA0DB60EC3681079C7740B90465999C62CD7C00D65D3C9E57A9 SWAP5 DUP13 SWAP5 SWAP4 DUP4 SWAP3 PUSH1 0x60 DUP5 ADD SWAP3 DUP8 DUP3 ADD SWAP3 SWAP2 MUL SWAP1 DUP2 SWAP1 DUP5 SWAP1 DUP5 SWAP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC6A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC52 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x4 DUP1 SLOAD DUP3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP2 SWAP1 SSTORE DUP6 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP3 KECCAK256 DUP4 SWAP1 SSTORE DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD25 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND SWAP3 SWAP1 DUP2 LT PUSH2 0xD03 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND EQ SWAP1 POP PUSH2 0x76D JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP INVALID SLOAD PUSH9 0x6520696E7075742061 PUSH19 0x72617920697320626967676572207468616E20 PUSH5 0x65636C6172 PUSH6 0x64206C6F6732 KECCAK256 PUSH20 0x697A6554686520696E646578206F662068697374 PUSH16 0x727920646F65736E2774206578697374 KECCAK256 PUSH26 0x657454686520696E707574206172726179206D75737420636F6E PUSH21 0x61696E20706F776572206F66203220656C656D656E PUSH21 0x735468652076616C7565206F66206C6F673253697A PUSH6 0x20646F65736E 0x27 PUSH21 0x206D6174636820696E20686973746F727943616E6E PUSH16 0x7420626520626967676572207468616E KECCAK256 PUSH21 0x6865206D616368696E6520697473656C6654686520 PUSH10 0x6E64657820646F65736E 0x27 PUSH21 0x20657869737420696E2074686520686973746F7279 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2F 0x48 0xC8 0xB2 0xC3 SDIV 0x25 0xFB MSTORE 0x21 0xE8 0xDB SIGNEXTEND PUSH31 0xCE0814730E62F50A55C544D3178124FFA77B64736F6C634300070400330000 ",
      "sourceMap": "1510:4833:4:-:0;;;1976:1;1946:31;;1510:4833;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "generatedSources": [],
      "immutableReferences": {},
      "linkReferences": {
        "@cartesi/util/contracts/Merkle.sol": {
          "Merkle": [
            {
              "length": 20,
              "start": 1364
            },
            {
              "length": 20,
              "start": 2014
            },
            {
              "length": 20,
              "start": 2589
            },
            {
              "length": 20,
              "start": 2805
            }
          ]
        }
      },
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x26987B60 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x4891EA36 EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0x6A22E5FD EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0x833459BC EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0xA1DDFF26 EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0xADAEA8DC EQ PUSH2 0x221 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F PUSH2 0x261 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x6F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 CALLDATALOAD AND SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x267 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x6F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x773 JUMP JUMPDEST PUSH2 0x6F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x167 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x7C8 JUMP JUMPDEST PUSH2 0x6F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 CALLDATALOAD AND SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x7DA SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x24D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH2 0xCC5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND LT ISZERO PUSH2 0x2C8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x48617320746F206265206174206C65617374206F6E6520776F72640000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT ISZERO PUSH2 0x311 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xDE4 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD GT PUSH2 0x367 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520696E7075742061727261792063616E6E6F7420626520656D70747900 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 MLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x2 NOT DUP7 ADD DUP2 AND PUSH1 0x2 EXP AND SWAP1 DUP2 LT ISZERO PUSH2 0x3BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xD2F PUSH1 0x31 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP5 MLOAD EQ PUSH2 0x49A JUMPI PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x407 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x457 JUMPI DUP6 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x422 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x436 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x40D JUMP JUMPDEST POP DUP5 MLOAD JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x496 JUMPI PUSH1 0x0 PUSH1 0xC0 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x475 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x45B JUMP JUMPDEST POP SWAP2 POP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4DD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x54F JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4F8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x8 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x53C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4E3 JUMP JUMPDEST POP PUSH1 0x0 PUSH20 0x0 PUSH4 0x82B0EAB8 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5BC JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x5A4 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x5F3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x609 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP11 DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD DUP7 DUP2 MSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE SWAP6 MLOAD PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B PUSH1 0x2 SWAP1 SWAP8 MUL SWAP7 DUP8 ADD DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND SWAP2 SWAP1 SWAP7 AND OR SWAP1 SWAP5 SSTORE MLOAD PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85C SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x4 SLOAD DUP5 MLOAD DUP1 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP5 DUP3 MSTORE DUP12 MLOAD SWAP5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP11 MLOAD SWAP5 SWAP6 POP DUP6 SWAP5 PUSH32 0x5FDB13B5E276437AF6AFB5D6BEDE9CF90CB8CD2F13C93048434BF9FCF7284622 SWAP4 DUP13 SWAP4 DUP15 SWAP4 SWAP3 DUP4 SWAP3 PUSH1 0x60 DUP5 ADD SWAP3 DUP8 DUP3 ADD SWAP3 SWAP1 SWAP2 MUL SWAP1 DUP2 SWAP1 DUP5 SWAP1 DUP5 SWAP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x716 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x6FE JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x4 DUP1 SLOAD DUP3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP2 SWAP1 SSTORE DUP6 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP3 KECCAK256 DUP4 SWAP1 SSTORE DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE SWAP4 POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD DUP3 LT PUSH2 0x7B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xE0C PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0x0 PUSH4 0xD82AE4B1 DUP4 MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x82C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x840 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x856 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x893 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x30 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xD86 PUSH1 0x30 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x974 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x8AB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x4 SLOAD GT PUSH2 0x8F2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xD60 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x900 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0x912 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ PUSH2 0x96C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xDB6 PUSH1 0x2E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x896 JUMP JUMPDEST POP PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x98E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9B8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0xA18 JUMPI PUSH1 0x3 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9D5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0x9E7 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA05 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x9BE JUMP JUMPDEST POP PUSH1 0x0 PUSH20 0x0 PUSH4 0x82B0EAB8 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA85 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xA6D JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xABC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xAD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD DUP5 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x6C8E54B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE MLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH20 0x0 SWAP2 PUSH4 0x6C8E54B SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xB42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0xFF SWAP1 SWAP3 AND DUP9 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x20 DUP1 DUP8 ADD DUP10 DUP2 MSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE SWAP9 MLOAD PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B PUSH1 0x2 SWAP1 SWAP11 MUL SWAP10 DUP11 ADD DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND SWAP2 SWAP1 SWAP7 AND OR SWAP1 SWAP5 SSTORE MLOAD PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85C SWAP1 SWAP8 ADD SWAP7 SWAP1 SWAP7 SSTORE PUSH1 0x4 SLOAD DUP6 MLOAD DUP1 DUP9 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP6 DUP3 MSTORE DUP12 MLOAD SWAP6 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE DUP11 MLOAD SWAP4 SWAP7 POP DUP8 SWAP6 PUSH32 0x89CEFBA87D8A8FA0DB60EC3681079C7740B90465999C62CD7C00D65D3C9E57A9 SWAP5 DUP13 SWAP5 SWAP4 DUP4 SWAP3 PUSH1 0x60 DUP5 ADD SWAP3 DUP8 DUP3 ADD SWAP3 SWAP2 MUL SWAP1 DUP2 SWAP1 DUP5 SWAP1 DUP5 SWAP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC6A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC52 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x4 DUP1 SLOAD DUP3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP2 SWAP1 SSTORE DUP6 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP3 KECCAK256 DUP4 SWAP1 SSTORE DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD25 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND SWAP3 SWAP1 DUP2 LT PUSH2 0xD03 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND EQ SWAP1 POP PUSH2 0x76D JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP INVALID SLOAD PUSH9 0x6520696E7075742061 PUSH19 0x72617920697320626967676572207468616E20 PUSH5 0x65636C6172 PUSH6 0x64206C6F6732 KECCAK256 PUSH20 0x697A6554686520696E646578206F662068697374 PUSH16 0x727920646F65736E2774206578697374 KECCAK256 PUSH26 0x657454686520696E707574206172726179206D75737420636F6E PUSH21 0x61696E20706F776572206F66203220656C656D656E PUSH21 0x735468652076616C7565206F66206C6F673253697A PUSH6 0x20646F65736E 0x27 PUSH21 0x206D6174636820696E20686973746F727943616E6E PUSH16 0x7420626520626967676572207468616E KECCAK256 PUSH21 0x6865206D616368696E6520697473656C6654686520 PUSH10 0x6E64657820646F65736E 0x27 PUSH21 0x20657869737420696E2074686520686973746F7279 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2F 0x48 0xC8 0xB2 0xC3 SDIV 0x25 0xFB MSTORE 0x21 0xE8 0xDB SIGNEXTEND PUSH31 0xCE0814730E62F50A55C544D3178124FFA77B64736F6C634300070400330000 ",
      "sourceMap": "1510:4833:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1946:31;;;:::i;:::-;;;;;;;;;;;;;;;;2399:1560;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2399:1560:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2399:1560:4;;-1:-1:-1;2399:1560:4;;-1:-1:-1;;;;;2399:1560:4:i;6155:186::-;;;;;;;;;;;;;;;;-1:-1:-1;6155:186:4;;:::i;5894:104::-;;;;;;;;;;;;;;;;-1:-1:-1;5894:104:4;;:::i;4091:1249::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4091:1249:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4091:1249:4;;-1:-1:-1;4091:1249:4;;-1:-1:-1;;;;;4091:1249:4:i;5498:241::-;;;;;;;;;;;;;;;;-1:-1:-1;5498:241:4;;;;;;-1:-1:-1;;;;;5498:241:4;;:::i;:::-;;;;;;;;;;;;;;;;;;1946:31;;;;:::o;2399:1560::-;2492:7;2532:1;2519:9;-1:-1:-1;;;;;2519:14:4;;;2511:54;;;;;-1:-1:-1;;;2511:54:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;2596:2;2583:9;-1:-1:-1;;;;;2583:15:4;;;2575:68;;;;-1:-1:-1;;;2575:68:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2676:1;2661:5;:12;:16;2653:60;;;;;-1:-1:-1;;;2653:60:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;2848:12;;2747:5;;-1:-1:-1;;;;;;;2799:13:4;;2785:28;;2792:1;2785:28;2762:51;;2832:28;;;2824:90;;;;-1:-1:-1;;;2824:90:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2945:12;2929:5;:12;:28;2925:433;;3025:26;3067:12;-1:-1:-1;;;;;3054:26:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3054:26:4;;3025:55;;3100:9;3095:100;3119:5;:12;3115:1;:16;3095:100;;;3172:5;3178:1;3172:8;;;;;;;;;;;;;;3156:10;3167:1;3156:13;;;;;;;;-1:-1:-1;;;;;;3156:24:4;;;:13;;;;;;;;;;;:24;3133:3;;3095:100;;;-1:-1:-1;3225:12:4;;3208:109;3243:10;:17;3239:1;:21;3208:109;;;3301:1;3285:17;;:10;3296:1;3285:13;;;;;;;;-1:-1:-1;;;;;;3285:17:4;;;:13;;;;;;;;;;;:17;3262:3;;3208:109;;;-1:-1:-1;3337:10:4;-1:-1:-1;2925:433:4;3368:23;3408:4;:11;-1:-1:-1;;;;;3394:26:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3394:26:4;;3368:52;;3436:9;3431:113;3453:4;:11;3451:1;:13;3431:113;;;3524:4;3529:1;3524:7;;;;;;;;;;;;;;3507:25;;;;;;-1:-1:-1;;;;;3507:25:4;;;;;;;;;;;;;;;;;;;;;3497:36;;;;;;3485:6;3492:1;3485:9;;;;;;;;;;;;;;;;;:48;3466:3;;3431:113;;;;3554:12;3569:6;:34;3604:6;3569:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3569:42:4;3638:26;;;;;;;;-1:-1:-1;;;;;3638:26:4;;;;;;3569:42;3638:26;;;;;;3621:11;:44;;;;;;;-1:-1:-1;3621:44:4;;;;;;;;;;;;;;;-1:-1:-1;;3621:44:4;;;;;;;;;;;;;;;;;;3722:12;;3680:115;;;;;;;;;;;;;;;;;;;;;;;3569:42;;-1:-1:-1;3569:42:4;;3680:115;;;;3638:26;;3680:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3805:12;:18;;;;;;;;;;;:25;;-1:-1:-1;;3805:25:4;3826:4;3805:25;;;;;;3857:12;;;3840:14;;;;;;:29;;;3879:21;;:7;:21;;;;;:28;;;3917:14;;;;;;;3818:4;-1:-1:-1;;;;2399:1560:4;;;;;:::o;6155:186::-;6211:7;6247:12;;6238:6;:21;6230:72;;;;-1:-1:-1;;;6230:72:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6319:15:4;;;;:7;:15;;;;;;;6155:186::o;5894:104::-;5950:7;5976:15;;;:8;:15;;;;;;;5894:104::o;4091:1249::-;4191:7;4218:6;:17;4236:8;:15;4218:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4218:34:4;4210:95;;;;-1:-1:-1;;;4210:95:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4386:9;4381:265;4403:8;:15;4401:1;:17;4381:265;;;4462:8;4471:1;4462:11;;;;;;;;;;;;;;4447:12;;:26;4439:77;;;;-1:-1:-1;;;4439:77:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4551:11;4563:8;4572:1;4563:11;;;;;;;;;;;;;;4551:24;;;;;;;;;;;;;;;;;;;;;:33;-1:-1:-1;;;;;4538:46:4;;;4551:33;;4538:46;4530:105;;;;-1:-1:-1;;;4530:105:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4420:3;;4381:265;;;;4656:23;4696:8;:15;-1:-1:-1;;;;;4682:30:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4682:30:4;;4656:56;;4727:9;4722:110;4744:8;:15;4742:1;:17;4722:110;;;4792:11;4804:8;4813:1;4804:11;;;;;;;;;;;;;;4792:24;;;;;;;;;;;;;;;;;;:29;;;4780:6;4787:1;4780:9;;;;;;;;;;;;;;;;;:41;4761:3;;4722:110;;;;4842:12;4857:6;:34;4892:6;4857:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4857:42:4;4948:15;;4928:36;;;-1:-1:-1;;;4928:36:4;;;;;;;;;;4857:42;;-1:-1:-1;4910:15:4;;4928:6;;:19;;:36;;;;;4857:42;;4928:36;;;;;;;:6;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4928:36:4;4991:37;;;;;;;;4910:54;;;;5001:20;;;-1:-1:-1;;;;;4991:37:4;;;;;;4928:36;4991:37;;;;;;4974:11;:55;;;;;;;-1:-1:-1;4974:55:4;;;;;;;;;;;;;;;-1:-1:-1;;4974:55:4;;;;;;;;;;;;;;;;;;5089:12;;5044:132;;;;;;;;;;;;;;;;;;;;;;;4910:54;;-1:-1:-1;4991:37:4;;5044:132;;;;5001:20;5044:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5186:12:4;:18;;;;;;;;;;;:25;;-1:-1:-1;;5186:25:4;5207:4;5186:25;;;;;;5238:12;;;5221:14;;;;;;:29;;;5260:21;;:7;:21;;;;;:28;;;5298:14;;;;;;;5199:4;-1:-1:-1;;4091:1249:4;;;;:::o;5498:241::-;5584:4;5604:19;;;;;;;;;;;;;5600:111;;;5660:15;;;;:8;:15;;;;;;5648:11;:28;;-1:-1:-1;;;;;5647:52:4;;;5660:15;5648:28;;;;;;;;;;;;;;;;;;;:37;-1:-1:-1;;;;;5648:37:4;5647:52;;-1:-1:-1;5639:61:4;;5600:111;-1:-1:-1;5727:5:4;5498:241;;;;:::o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "737400",
        "executionCost": "5779",
        "totalCost": "743179"
      },
      "external": {
        "calculateMerkleRootFromData(uint64,bytes8[])": "infinite",
        "calculateMerkleRootFromHistory(uint64,uint256[])": "infinite",
        "currentIndex()": "976",
        "getLogIndex(bytes32)": "1150",
        "getLogRoot(uint256)": "infinite",
        "isLogAvailable(bytes32,uint64)": "3899"
      }
    },
    "methodIdentifiers": {
      "calculateMerkleRootFromData(uint64,bytes8[])": "4891ea36",
      "calculateMerkleRootFromHistory(uint64,uint256[])": "a1ddff26",
      "currentIndex()": "26987b60",
      "getLogIndex(bytes32)": "833459bc",
      "getLogRoot(uint256)": "6a22e5fd",
      "isLogAvailable(bytes32,uint64)": "adaea8dc"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes8[]\",\"name\":\"_data\",\"type\":\"bytes8[]\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_log2Size\",\"type\":\"uint64\"}],\"name\":\"MerkleRootCalculatedFromData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_log2Size\",\"type\":\"uint64\"}],\"name\":\"MerkleRootCalculatedFromHistory\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_log2Size\",\"type\":\"uint64\"},{\"internalType\":\"bytes8[]\",\"name\":\"_data\",\"type\":\"bytes8[]\"}],\"name\":\"calculateMerkleRootFromData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_log2Size\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"calculateMerkleRootFromHistory\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"getLogIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLogRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_log2Size\",\"type\":\"uint64\"}],\"name\":\"isLogAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stephen Chen\",\"details\":\"This contract is not well-tested yet.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Logger\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateMerkleRootFromData(uint64,bytes8[])\":{\"notice\":\"Calculate the Merkle tree and return the root hash\"},\"calculateMerkleRootFromHistory(uint64,uint256[])\":{\"notice\":\"Calculate the Merkle tree and return the root hash\"},\"getLogIndex(bytes32)\":{\"notice\":\"Getter function to get the index in the history for the given hash\"},\"getLogRoot(uint256)\":{\"notice\":\"Getter function to get the root in the history for the given index\"},\"isLogAvailable(bytes32,uint64)\":{\"notice\":\"Getter function to check if log has been submitted for the given hash\"}},\"notice\":\"A contract that offers data availability\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Logger.sol\":\"Logger\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/util/contracts/Decorated.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.7.0;\\n\\n\\ncontract Decorated {\\n    // This contract defines several modifiers but does not use\\n    // them - they will be used in derived contracts.\\n    modifier onlyBy(address user) {\\n        require(msg.sender == user, \\\"Cannot be called by user\\\");\\n        _;\\n    }\\n\\n    modifier onlyAfter(uint256 time) {\\n        require(block.timestamp > time, \\\"Cannot be called now\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdbba019b8f7f93b212a5bbae402ee988321c4fa82ed2b4c9e55b4d7ddf35dcc3\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/Merkle.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n/// @title Library for Merkle proofs\\npragma solidity ^0.7.0;\\n\\n\\nlibrary Merkle {\\n    function getPristineHash(uint8 _log2Size) public pure returns (bytes32) {\\n        require(_log2Size >= 3, \\\"Has to be at least one word\\\");\\n        require(_log2Size <= 64, \\\"Cannot be bigger than the machine itself\\\");\\n\\n        bytes8 value = 0;\\n        bytes32 runningHash = keccak256(abi.encodePacked(value));\\n\\n        for (uint256 i = 3; i < _log2Size; i++) {\\n            runningHash = keccak256(abi.encodePacked(runningHash, runningHash));\\n        }\\n\\n        return runningHash;\\n    }\\n\\n    function getRoot(uint64 _position, bytes8 _value, bytes32[] memory proof) public pure returns (bytes32) {\\n        bytes32 runningHash = keccak256(abi.encodePacked(_value));\\n\\n        return getRootWithDrive(\\n            _position,\\n            3,\\n            runningHash,\\n            proof\\n        );\\n    }\\n\\n    function getRootWithDrive(\\n        uint64 _position,\\n        uint8 _logOfSize,\\n        bytes32 _drive,\\n        bytes32[] memory siblings\\n    ) public pure returns (bytes32)\\n    {\\n        require(_logOfSize >= 3, \\\"Must be at least a word\\\");\\n        require(_logOfSize <= 64, \\\"Cannot be bigger than the machine itself\\\");\\n\\n        uint64 size = uint64(2) ** _logOfSize;\\n\\n        require(((size - 1) & _position) == 0, \\\"Position is not aligned\\\");\\n        require(siblings.length == 64 - _logOfSize, \\\"Proof length does not match\\\");\\n\\n        bytes32 drive = _drive;\\n\\n        for (uint64 i = 0; i < siblings.length; i++) {\\n            if ((_position & (size << i)) == 0) {\\n                drive = keccak256(abi.encodePacked(drive, siblings[i]));\\n            } else {\\n                drive = keccak256(abi.encodePacked(siblings[i], drive));\\n            }\\n        }\\n\\n        return drive;\\n    }\\n\\n    function getLog2Floor(uint256 number) public pure returns (uint8) {\\n\\n        uint8 result = 0;\\n\\n        uint256 checkNumber = number;\\n        checkNumber = checkNumber >> 1;\\n        while (checkNumber > 0) {\\n            ++result;\\n            checkNumber = checkNumber >> 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    function isPowerOf2(uint256 number) public pure returns (bool) {\\n\\n        uint256 checkNumber = number;\\n        if (checkNumber == 0) {\\n            return false;\\n        }\\n\\n        while ((checkNumber & 1) == 0) {\\n            checkNumber = checkNumber >> 1;\\n        }\\n\\n        checkNumber = checkNumber >> 1;\\n\\n        if (checkNumber == 0) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice Calculate the root of Merkle tree from an array of power of 2 elements\\n    /// @param hashes The array containing power of 2 elements\\n    /// @return byte32 the root hash being calculated\\n    function calculateRootFromPowerOfTwo(bytes32[] memory hashes) public pure returns (bytes32) {\\n        // revert when the input is not of power of 2\\n        require(isPowerOf2(hashes.length), \\\"The input array must contain power of 2 elements\\\");\\n\\n        if (hashes.length == 1) {\\n            return hashes[0];\\n        }else {\\n            bytes32[] memory newHashes = new bytes32[](hashes.length >> 1);\\n\\n            for (uint256 i = 0; i < hashes.length; i += 2) {\\n                newHashes[i >> 1] = keccak256(abi.encodePacked(hashes[i], hashes[i + 1]));\\n            }\\n\\n            return calculateRootFromPowerOfTwo(newHashes);\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xfab427885024176038f230531f5fbc87e80c38b22d7b5307a57a7a0b7cdfc6fe\",\"license\":\"Apache-2.0\"},\"contracts/Logger.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@cartesi/util/contracts/Decorated.sol\\\";\\nimport \\\"@cartesi/util/contracts/Merkle.sol\\\";\\nimport \\\"./LoggerInterface.sol\\\";\\n\\n\\n/// @title Logger\\n/// @author Stephen Chen\\n/// @notice A contract that offers data availability\\n/// @dev This contract is not well-tested yet.\\ncontract Logger is Decorated, LoggerInterface {\\n  // the caller can either provide the full data to generate the Merkle tree root\\n  // or combine the existing hashes in the history to a deeper tree\\n\\n    struct DataEntry {\\n        uint64 log2Size;\\n        bytes32 root;\\n    }\\n\\n    mapping(bytes32 => bool) logSubmitted;\\n    mapping(bytes32 => uint256) logIndex;\\n    mapping(uint256 => bytes32) logRoot;\\n    DataEntry[] dataHistory;\\n\\n    uint256 public currentIndex = 0;\\n\\n    // TODO: get rid of the _data from event\\n    event MerkleRootCalculatedFromData(uint256 indexed _index, bytes8[] _data, bytes32 indexed _root, uint64 _log2Size);\\n    event MerkleRootCalculatedFromHistory(uint256 indexed _index, uint256[] _indices, bytes32 indexed _root, uint64 _log2Size);\\n\\n    /// @notice Calculate the Merkle tree and return the root hash\\n    // @param _hashes The array of words of the file\\n    function calculateMerkleRootFromData(uint64 _log2Size, bytes8[] memory _data) public returns(bytes32) {\\n        require(_log2Size >= 3, \\\"Has to be at least one word\\\");\\n        require(_log2Size <= 64, \\\"Cannot be bigger than the machine itself\\\");\\n        require(_data.length > 0, \\\"The input array cannot be empty\\\");\\n\\n        bytes8[] memory data = _data;\\n        uint256 power2Length = uint64(2) ** (_log2Size - 3);\\n\\n        require(power2Length >= _data.length, \\\"The input array is bigger than declared log2 size\\\");\\n\\n        if (_data.length != power2Length) {\\n            // pad the list to length of power of 2\\n            bytes8[] memory paddedData = new bytes8[](power2Length);\\n\\n            for (uint256 i = 0; i < _data.length; ++i) {\\n                paddedData[i] = _data[i];\\n            }\\n            for (uint256 i = _data.length; i < paddedData.length; ++i) {\\n                paddedData[i] = 0;\\n            }\\n            data = paddedData;\\n        }\\n\\n        bytes32[] memory hashes = new bytes32[](data.length);\\n\\n        for (uint256 i = 0; i<data.length; ++i) {\\n            hashes[i] = keccak256(abi.encodePacked(data[i]));\\n        }\\n\\n        bytes32 root = Merkle.calculateRootFromPowerOfTwo(hashes);\\n        dataHistory.push(DataEntry(_log2Size, root));\\n        emit MerkleRootCalculatedFromData(\\n            currentIndex,\\n            _data,\\n            root,\\n            _log2Size);\\n        logSubmitted[root] = true;\\n        logIndex[root] = currentIndex;\\n        logRoot[currentIndex] = root;\\n        ++currentIndex;\\n        return root;\\n    }\\n\\n    /// @notice Calculate the Merkle tree and return the root hash\\n    // @param _indices The array of indices of the history\\n    function calculateMerkleRootFromHistory(uint64 _log2Size, uint256[] memory _indices) public returns(bytes32) {\\n        require(Merkle.isPowerOf2(_indices.length), \\\"The input array must contain power of 2 elements\\\");\\n\\n        // check indices exist and the value of log2Size matches\\n        for (uint256 i = 0; i<_indices.length; ++i) {\\n            require(currentIndex > _indices[i], \\\"The index of history doesn't exist yet\\\");\\n            require(_log2Size == dataHistory[_indices[i]].log2Size, \\\"The value of log2Size doesn't match in history\\\");\\n        }\\n\\n        bytes32[] memory hashes = new bytes32[](_indices.length);\\n        for (uint256 i = 0; i<_indices.length; ++i) {\\n            hashes[i] = dataHistory[_indices[i]].root;\\n        }\\n\\n        bytes32 root = Merkle.calculateRootFromPowerOfTwo(hashes);\\n\\n        uint64 log2Size = Merkle.getLog2Floor(_indices.length);\\n        dataHistory.push(DataEntry(log2Size + _log2Size, root));\\n        emit MerkleRootCalculatedFromHistory(\\n            currentIndex,\\n            _indices,\\n            root,\\n            log2Size + _log2Size);\\n        logSubmitted[root] = true;\\n        logIndex[root] = currentIndex;\\n        logRoot[currentIndex] = root;\\n        ++currentIndex;\\n        return root;\\n    }\\n\\n    /// @notice Getter function to check if log has been submitted for the given hash\\n    // @param _root The hash value to check in the logger history\\n    function isLogAvailable(bytes32 _root, uint64 _log2Size) public override view returns(bool) {\\n        if (logSubmitted[_root]) {\\n            return ((dataHistory[logIndex[_root]].log2Size) == _log2Size);\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Getter function to get the index in the history for the given hash\\n    // @param _root The hash value to check in the logger history\\n    function getLogIndex(bytes32 _root) public view returns(uint256) {\\n        return logIndex[_root];\\n    }\\n\\n    /// @notice Getter function to get the root in the history for the given index\\n    // @param _index The index value to check in the logger history\\n    function getLogRoot(uint256 _index) public view returns(bytes32) {\\n        require(_index < currentIndex, \\\"The index doesn't exist in the history\\\");\\n        return logRoot[_index];\\n    }\\n}\\n\",\"keccak256\":\"0x3cf1bc342cb6621b04911b35eeea0d4f77a152466cbf8c9f5252c6d88048326c\",\"license\":\"GPL-3.0-only\"},\"contracts/LoggerInterface.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n\\n/// @title Interface for logger test instantiator\\npragma solidity ^0.7.0;\\n\\n\\ninterface LoggerInterface {\\n    function isLogAvailable(bytes32 _root, uint64 _log2Size) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x8b41a0113073808f74c6bd517feef04b9939fb7ab9b699d061a5104426f5b69e\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 592,
        "contract": "contracts/Logger.sol:Logger",
        "label": "logSubmitted",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 596,
        "contract": "contracts/Logger.sol:Logger",
        "label": "logIndex",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 600,
        "contract": "contracts/Logger.sol:Logger",
        "label": "logRoot",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 603,
        "contract": "contracts/Logger.sol:Logger",
        "label": "dataHistory",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(DataEntry)588_storage)dyn_storage"
      },
      {
        "astId": 606,
        "contract": "contracts/Logger.sol:Logger",
        "label": "currentIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_array(t_struct(DataEntry)588_storage)dyn_storage": {
        "base": "t_struct(DataEntry)588_storage",
        "encoding": "dynamic_array",
        "label": "struct Logger.DataEntry[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(DataEntry)588_storage": {
        "encoding": "inplace",
        "label": "struct Logger.DataEntry",
        "members": [
          {
            "astId": 585,
            "contract": "contracts/Logger.sol:Logger",
            "label": "log2Size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 587,
            "contract": "contracts/Logger.sol:Logger",
            "label": "root",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateMerkleRootFromData(uint64,bytes8[])": {
        "notice": "Calculate the Merkle tree and return the root hash"
      },
      "calculateMerkleRootFromHistory(uint64,uint256[])": {
        "notice": "Calculate the Merkle tree and return the root hash"
      },
      "getLogIndex(bytes32)": {
        "notice": "Getter function to get the index in the history for the given hash"
      },
      "getLogRoot(uint256)": {
        "notice": "Getter function to get the root in the history for the given index"
      },
      "isLogAvailable(bytes32,uint64)": {
        "notice": "Getter function to check if log has been submitted for the given hash"
      }
    },
    "notice": "A contract that offers data availability",
    "version": 1
  }
}