{
  "address": "0x0e38b65ad9f28209BF646f876E83afa2038187e3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "LoggerTestCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_state",
          "type": "uint8"
        }
      ],
      "name": "LoggerTestFinished",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_submittedHash",
          "type": "bytes32"
        }
      ],
      "name": "claimDownloading",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "claimFinished",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "claimSubmitting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "deactivate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getCurrentState",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentNonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_currentState",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getSubInstances",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isConcerned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "stateIsDownloading",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "stateIsFinished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "stateIsSubmitting",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x70804bb880488d75d0bcc33949c408bfb2871330be90e9b0f3ab34d583fe73cc",
  "receipt": {
    "to": null,
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": "0x0e38b65ad9f28209BF646f876E83afa2038187e3",
    "transactionIndex": 3,
    "gasUsed": "858104",
    "logsBloom": "0x
    "blockHash": "0x056d429493fad97d6edea118eff4f40060e09c47629be6b1280ffbacd55cc69d",
    "transactionHash": "0x70804bb880488d75d0bcc33949c408bfb2871330be90e9b0f3ab34d583fe73cc",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 3701721,
        "transactionHash": "0x70804bb880488d75d0bcc33949c408bfb2871330be90e9b0f3ab34d583fe73cc",
        "address": "0x0e38b65ad9f28209BF646f876E83afa2038187e3",
        "topics": [
          "0x77a232d0b541d1b39d33a99d472f21d566b9eca98e550634b0154ffda4f85925"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018930e8a66a1dbe21d00581216789aab7460afd0",
        "logIndex": 13,
        "blockHash": "0x056d429493fad97d6edea118eff4f40060e09c47629be6b1280ffbacd55cc69d"
      }
    ],
    "blockNumber": 3701721,
    "cumulativeGasUsed": "1515638",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x18930e8a66a1DbE21D00581216789AAB7460Afd0"
  ],
  "solcInputHash": "55c414c18e071e98d0825a8118fb45c2",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"LoggerTestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"LoggerTestFinished\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_submittedHash\",\"type\":\"bytes32\"}],\"name\":\"claimDownloading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"claimFinished\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"claimSubmitting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"deactivate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getCurrentState\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_currentState\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getSubInstances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isConcerned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"stateIsDownloading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"stateIsFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"stateIsSubmitting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimDownloading(uint256,bytes32)\":{\"notice\":\"Claim Downloading for the logger test.\"},\"claimFinished(uint256)\":{\"notice\":\"Claim Finished for the logger test.\"},\"claimSubmitting(uint256)\":{\"notice\":\"Claim Submitting for the logger test.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LoggerTestInstantiator.sol\":\"LoggerTestInstantiator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/util/contracts/Decorated.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.7.0;\\n\\n\\ncontract Decorated {\\n    // This contract defines several modifiers but does not use\\n    // them - they will be used in derived contracts.\\n    modifier onlyBy(address user) {\\n        require(msg.sender == user, \\\"Cannot be called by user\\\");\\n        _;\\n    }\\n\\n    modifier onlyAfter(uint256 time) {\\n        require(block.timestamp > time, \\\"Cannot be called now\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdbba019b8f7f93b212a5bbae402ee988321c4fa82ed2b4c9e55b4d7ddf35dcc3\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/Instantiator.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\npragma solidity ^0.7.0;\\n\\n\\ninterface Instantiator {\\n\\n    modifier onlyInstantiated(uint256 _index) virtual;\\n\\n    modifier onlyActive(uint256 _index) virtual;\\n\\n    modifier increasesNonce(uint256 _index) virtual;\\n\\n    function isActive(uint256 _index) external view returns (bool);\\n\\n    function getNonce(uint256 _index) external view returns (uint256);\\n\\n    function isConcerned(uint256 _index, address _user) external view returns (bool);\\n\\n    function getSubInstances(uint256 _index, address) external view returns (address[] memory _addresses, uint256[] memory _indices);\\n\\n    function deactivate(uint256 _index) external;\\n}\\n\",\"keccak256\":\"0x084e3e769f423b3f32bd8faf119be132a478eeea8006bed69b527b2fdcfd45a1\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/InstantiatorImpl.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Instantiator.sol\\\";\\n\\nabstract contract InstantiatorImpl is Instantiator {\\n    uint256 public currentIndex = 0;\\n\\n    mapping(uint256 => bool) internal active;\\n    mapping(uint256 => uint256) internal nonce;\\n\\n    modifier onlyInstantiated(uint256 _index) override {\\n        require(currentIndex > _index, \\\"Index not instantiated\\\");\\n        _;\\n    }\\n\\n    modifier onlyActive(uint256 _index) override {\\n        require(currentIndex > _index, \\\"Index not instantiated\\\");\\n        require(isActive(_index), \\\"Index inactive\\\");\\n        _;\\n    }\\n\\n    modifier increasesNonce(uint256 _index) override {\\n        nonce[_index]++;\\n        _;\\n    }\\n\\n    function isActive(uint256 _index) public override view returns (bool) {\\n        return (active[_index]);\\n    }\\n\\n    function getNonce(uint256 _index)\\n        public\\n        override\\n        view\\n        onlyActive(_index)\\n        returns (uint256 currentNonce)\\n    {\\n        return nonce[_index];\\n    }\\n\\n    function deactivate(uint256 _index) public override {\\n        active[_index] = false;\\n        nonce[_index] = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xc1db237a28042f74224ae2d4398616fb670ce87709ffd8505c142cddedee6954\",\"license\":\"Apache-2.0\"},\"contracts/LoggerTestInstantiator.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n\\n/// @title An instantiator of logger test\\npragma solidity ^0.7.0;\\n\\nimport \\\"@cartesi/util/contracts/InstantiatorImpl.sol\\\";\\nimport \\\"@cartesi/util/contracts/Decorated.sol\\\";\\nimport \\\"./LoggerTestInterface.sol\\\";\\n\\n\\ncontract LoggerTestInstantiator is InstantiatorImpl, LoggerTestInterface, Decorated {\\n    // after construction, the test is in the Idle state and can be changed to Submitting,\\n    // an hash of the submitted data's root merkle tree will be stored in the contract\\n    // and then be changed to Downloading state\\n    // after successful downloading, the state will be changed to Finished\\n\\n    // IMPLEMENT GARBAGE COLLECTOR AFTER AN INSTACE IS FINISHED!\\n    struct LoggerTestCtx {\\n        address user;\\n        bytes32 submittedHash;\\n        state currentState;\\n    }\\n\\n    mapping(uint256 => LoggerTestCtx) internal instance;\\n\\n    // These are the possible states and transitions of the contract.\\n\\n    // +---+\\n    // |   |\\n    // +---+\\n    //   |\\n    //   | constructor\\n    //   v\\n    // +------+\\n    // | Idle |\\n    // +------+\\n    //   |\\n    //   | claimSubmitting\\n    //   v\\n    // +------------+\\n    // | Submitting |\\n    // +------------+\\n    //   |\\n    //   | claimDownloading\\n    //   v\\n    // +-------------+\\n    // | Downloading |\\n    // +-------------+\\n    //   |\\n    //   | claimFinished\\n    //   v\\n    // +----------+\\n    // | Finished |\\n    // +----------+\\n\\n    event LoggerTestCreated(\\n        uint256 _index,\\n        address _user\\n    );\\n    event LoggerTestFinished(uint256 _index, uint8 _state);\\n\\n    constructor(\\n        address _user) {\\n        currentIndex = 0;\\n        LoggerTestCtx storage currentInstance = instance[currentIndex];\\n        currentInstance.user = _user;\\n        currentInstance.currentState = state.Idle;\\n\\n        emit LoggerTestCreated(\\n            currentIndex,\\n            _user);\\n\\n        active[currentIndex] = true;\\n        currentIndex++;\\n    }\\n\\n    /// @notice Claim Submitting for the logger test.\\n    function claimSubmitting(uint256 _index) public\\n        onlyInstantiated(_index)\\n        onlyBy(instance[_index].user)\\n    {\\n        require(instance[_index].currentState == state.Idle, \\\"The state should be Idle\\\");\\n\\n        instance[_index].currentState = state.Submitting;\\n        return;\\n    }\\n\\n    /// @notice Claim Downloading for the logger test.\\n    function claimDownloading(uint256 _index, bytes32 _submittedHash) public\\n        onlyInstantiated(_index)\\n        onlyBy(instance[_index].user)\\n    {\\n        require(instance[_index].currentState == state.Submitting, \\\"The state should be Submitting\\\");\\n\\n        instance[_index].currentState = state.Downloading;\\n        instance[_index].submittedHash = _submittedHash;\\n        return;\\n    }\\n\\n    /// @notice Claim Finished for the logger test.\\n    function claimFinished(uint256 _index) public override\\n        onlyInstantiated(_index)\\n        onlyBy(instance[_index].user)\\n    {\\n        require(instance[_index].currentState == state.Downloading, \\\"The state should be Downloading\\\");\\n\\n        instance[_index].currentState = state.Finished;\\n        deactivate(_index);\\n        emit LoggerTestFinished(_index, uint8(instance[_index].currentState));\\n    }\\n\\n   function getSubInstances(uint256, address)\\n        public override pure returns (address[] memory, uint256[] memory)\\n    {\\n        address[] memory a = new address[](0);\\n        uint256[] memory i = new uint256[](0);\\n        return (a, i);\\n    }\\n\\n    function isConcerned(uint256 _index, address _user) public override view returns (bool) {\\n        return (instance[_index].user == _user);\\n    }\\n\\n    function getState(uint256 _index, address) public view returns\\n        ( address _user,\\n        bytes32 _hash,\\n        bytes32 _currentState\\n        )\\n    {\\n        LoggerTestCtx memory i = instance[_index];\\n\\n        // we have to duplicate the code for getCurrentState because of\\n        // \\\"stack too deep\\\"\\n        bytes32 currentState;\\n        if (instance[_index].currentState == state.Idle) {\\n            currentState = \\\"Idle\\\";\\n        }\\n        if (instance[_index].currentState == state.Submitting) {\\n            currentState = \\\"Submitting\\\";\\n        }\\n        if (instance[_index].currentState == state.Downloading) {\\n            currentState = \\\"Downloading\\\";\\n        }\\n        if (instance[_index].currentState == state.Finished) {\\n            currentState = \\\"Finished\\\";\\n        }\\n\\n        return (\\n            i.user,\\n            i.submittedHash,\\n            currentState\\n        );\\n    }\\n\\n    function getCurrentState(uint256 _index) public override view\\n        onlyInstantiated(_index)\\n        returns (bytes32)\\n    {\\n        if (instance[_index].currentState == state.Idle) {\\n            return \\\"Idle\\\";\\n        }\\n        if (instance[_index].currentState == state.Submitting) {\\n            return \\\"Submitting\\\";\\n        }\\n        if (instance[_index].currentState == state.Downloading) {\\n            return \\\"Downloading\\\";\\n        }\\n        if (instance[_index].currentState == state.Finished) {\\n            return \\\"Finished\\\";\\n        }\\n        require(false, \\\"Unrecognized state\\\");\\n    }\\n\\n    // remove these functions and change tests accordingly\\n    function stateIsSubmitting(uint256 _index) public view\\n        onlyInstantiated(_index)\\n        returns (bool)\\n    { return instance[_index].currentState == state.Submitting; }\\n\\n    function stateIsDownloading(uint256 _index) public view\\n        onlyInstantiated(_index)\\n        returns (bool)\\n    { return instance[_index].currentState == state.Downloading; }\\n\\n    function stateIsFinished(uint256 _index) public view\\n        onlyInstantiated(_index)\\n        returns (bool)\\n    { return instance[_index].currentState == state.Finished; }\\n\\n    function clearInstance(uint256 _index) internal {\\n        delete instance[_index].user;\\n        delete instance[_index].submittedHash;\\n        deactivate(_index);\\n    }\\n}\\n\",\"keccak256\":\"0xfcc9a4a4d42795791f776c21e927b2cbf8af778a1d6ed73f344d66371500944f\",\"license\":\"GPL-3.0-only\"},\"contracts/LoggerTestInterface.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n\\n/// @title Interface for logger test instantiator\\npragma solidity ^0.7.0;\\n\\nimport \\\"@cartesi/util/contracts/Instantiator.sol\\\";\\n\\n\\ninterface LoggerTestInterface is Instantiator {\\n    enum state {\\n        Idle,\\n        Submitting,\\n        Downloading,\\n        Finished\\n    }\\n    function getCurrentState(uint256 _index) external view returns (bytes32);\\n\\n    function claimFinished(uint256 _index) external;\\n}\\n\",\"keccak256\":\"0x3b059aa5a8c339299116fc55d1e9b9fc67bdb1772f07dd5dfbb62f3b296269a9\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040526000805534801561001457600080fd5b50604051610e57380380610e578339818101604052602081101561003757600080fd5b50516000808055808052600360209081527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff80546001600160a01b0319166001600160a01b03851690811782557f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92f01805460ff191690556040805194855292840152815190927f77a232d0b541d1b39d33a99d472f21d566b9eca98e550634b0154ffda4f8592592908290030190a150506000805481526001602081905260408220805460ff1916821790558154019055610d41806101166000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806373df16121161008c57806397e33a021161006657806397e33a021461026a5780639e82018714610287578063c526656c146102a4578063ef068ba414610369576100ea565b806373df1612146101dc57806382afd23b14610230578063916b9bef1461024d576100ea565b806315d84dc2116100c857806315d84dc21461016b57806326987b60146101885780633d46b819146101a25780635748c130146101bf576100ea565b806301ff62ab146100ef5780630f3887b41461012f578063155d31da1461014e575b600080fd5b61011b6004803603604081101561010557600080fd5b50803590602001356001600160a01b031661038c565b604080519115158252519081900360200190f35b61014c6004803603602081101561014557600080fd5b50356103ad565b005b61011b6004803603602081101561016457600080fd5b50356104ec565b61011b6004803603602081101561018157600080fd5b5035610562565b6101906105b0565b60408051918252519081900360200190f35b610190600480360360208110156101b857600080fd5b50356105b6565b610190600480360360208110156101d557600080fd5b503561065c565b610208600480360360408110156101f257600080fd5b50803590602001356001600160a01b03166107d5565b604080516001600160a01b039094168452602084019290925282820152519081900360600190f35b61011b6004803603602081101561024657600080fd5b5035610934565b61014c6004803603602081101561026357600080fd5b5035610949565b61014c6004803603602081101561028057600080fd5b503561096c565b61011b6004803603602081101561029d57600080fd5b5035610b1b565b6102d0600480360360408110156102ba57600080fd5b50803590602001356001600160a01b0316610b69565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156103145781810151838201526020016102fc565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561035357818101518382015260200161033b565b5050505090500194505050505060405180910390f35b61014c6004803603604081101561037f57600080fd5b5080359060200135610b84565b600091825260036020526040909120546001600160a01b0391821691161490565b8080600054116103f2576040805162461bcd60e51b81526020600482015260166024820152600080516020610cec833981519152604482015290519081900360640190fd5b6000828152600360205260409020546001600160a01b0316338114610459576040805162461bcd60e51b815260206004820152601860248201527721b0b73737ba1031329031b0b63632b210313c903ab9b2b960411b604482015290519081900360640190fd5b600083815260036020819052604082206002015460ff169081111561047a57fe5b146104cc576040805162461bcd60e51b815260206004820152601860248201527f5468652073746174652073686f756c642062652049646c650000000000000000604482015290519081900360640190fd5b50506000908152600360205260409020600201805460ff19166001179055565b6000818060005411610533576040805162461bcd60e51b81526020600482015260166024820152600080516020610cec833981519152604482015290519081900360640190fd5b60025b60008481526003602081905260409091206002015460ff169081111561055857fe5b1491505b50919050565b60008180600054116105a9576040805162461bcd60e51b81526020600482015260166024820152600080516020610cec833981519152604482015290519081900360640190fd5b6001610536565b60005481565b60008180600054116105fd576040805162461bcd60e51b81526020600482015260166024820152600080516020610cec833981519152604482015290519081900360640190fd5b61060681610934565b610648576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b505060009081526002602052604090205490565b60008180600054116106a3576040805162461bcd60e51b81526020600482015260166024820152600080516020610cec833981519152604482015290519081900360640190fd5b600083815260036020819052604082206002015460ff16908111156106c457fe5b14156106d9576349646c6560e01b915061055c565b600160008481526003602081905260409091206002015460ff16908111156106fd57fe5b141561071857695375626d697474696e6760b01b915061055c565b600260008481526003602081905260409091206002015460ff169081111561073c57fe5b1415610758576a446f776e6c6f6164696e6760a81b915061055c565b60008381526003602081905260409091206002015460ff168181111561077a57fe5b14156107935767119a5b9a5cda195960c21b915061055c565b6040805162461bcd60e51b8152602060048201526012602482015271556e7265636f676e697a656420737461746560701b604482015290519081900360640190fd5b60008060006107e2610ccd565b600086815260036020818152604092839020835160608101855281546001600160a01b031681526001820154928101929092526002810154919390929084019160ff169081111561082f57fe5b600381111561083a57fe5b905250905060008060008881526003602081905260409091206002015460ff169081111561086457fe5b141561087457506349646c6560e01b5b600160008881526003602081905260409091206002015460ff169081111561089857fe5b14156108ae5750695375626d697474696e6760b01b5b600260008881526003602081905260409091206002015460ff16908111156108d257fe5b14156108e957506a446f776e6c6f6164696e6760a81b5b60008781526003602081905260409091206002015460ff168181111561090b57fe5b141561091f575067119a5b9a5cda195960c21b5b81516020909201519197919650945092505050565b60009081526001602052604090205460ff1690565b6000908152600160209081526040808320805460ff191690556002909152812055565b8080600054116109b1576040805162461bcd60e51b81526020600482015260166024820152600080516020610cec833981519152604482015290519081900360640190fd5b6000828152600360205260409020546001600160a01b0316338114610a18576040805162461bcd60e51b815260206004820152601860248201527721b0b73737ba1031329031b0b63632b210313c903ab9b2b960411b604482015290519081900360640190fd5b600260008481526003602081905260409091206002015460ff1690811115610a3c57fe5b14610a8e576040805162461bcd60e51b815260206004820152601f60248201527f5468652073746174652073686f756c6420626520446f776e6c6f6164696e6700604482015290519081900360640190fd5b6000838152600360208190526040909120600201805460ff19169091179055610ab683610949565b6000838152600360208190526040909120600201547fbdd51eb9fb70bb6e48865170e5931f9a9ad837dd15a4749be5eb0de6e645856191859160ff1690811115610afc57fe5b6040805192835260ff90911660208301528051918290030190a1505050565b6000818060005411610b62576040805162461bcd60e51b81526020600482015260166024820152600080516020610cec833981519152604482015290519081900360640190fd5b6003610536565b50506040805160008082526020820190815281830190925291565b818060005411610bc9576040805162461bcd60e51b81526020600482015260166024820152600080516020610cec833981519152604482015290519081900360640190fd5b6000838152600360205260409020546001600160a01b0316338114610c30576040805162461bcd60e51b815260206004820152601860248201527721b0b73737ba1031329031b0b63632b210313c903ab9b2b960411b604482015290519081900360640190fd5b600160008581526003602081905260409091206002015460ff1690811115610c5457fe5b14610ca6576040805162461bcd60e51b815260206004820152601e60248201527f5468652073746174652073686f756c64206265205375626d697474696e670000604482015290519081900360640190fd5b50506000918252600360205260409091206002808201805460ff1916909117905560010155565b6040805160608101825260008082526020820181905290918201529056fe496e646578206e6f7420696e7374616e74696174656400000000000000000000a26469706673582212202c89bf25bb66066f4916696acaac7489cda4a26f27d74a6696b601c5bb5f62cc64736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806373df16121161008c57806397e33a021161006657806397e33a021461026a5780639e82018714610287578063c526656c146102a4578063ef068ba414610369576100ea565b806373df1612146101dc57806382afd23b14610230578063916b9bef1461024d576100ea565b806315d84dc2116100c857806315d84dc21461016b57806326987b60146101885780633d46b819146101a25780635748c130146101bf576100ea565b806301ff62ab146100ef5780630f3887b41461012f578063155d31da1461014e575b600080fd5b61011b6004803603604081101561010557600080fd5b50803590602001356001600160a01b031661038c565b604080519115158252519081900360200190f35b61014c6004803603602081101561014557600080fd5b50356103ad565b005b61011b6004803603602081101561016457600080fd5b50356104ec565b61011b6004803603602081101561018157600080fd5b5035610562565b6101906105b0565b60408051918252519081900360200190f35b610190600480360360208110156101b857600080fd5b50356105b6565b610190600480360360208110156101d557600080fd5b503561065c565b610208600480360360408110156101f257600080fd5b50803590602001356001600160a01b03166107d5565b604080516001600160a01b039094168452602084019290925282820152519081900360600190f35b61011b6004803603602081101561024657600080fd5b5035610934565b61014c6004803603602081101561026357600080fd5b5035610949565b61014c6004803603602081101561028057600080fd5b503561096c565b61011b6004803603602081101561029d57600080fd5b5035610b1b565b6102d0600480360360408110156102ba57600080fd5b50803590602001356001600160a01b0316610b69565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156103145781810151838201526020016102fc565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561035357818101518382015260200161033b565b5050505090500194505050505060405180910390f35b61014c6004803603604081101561037f57600080fd5b5080359060200135610b84565b600091825260036020526040909120546001600160a01b0391821691161490565b8080600054116103f2576040805162461bcd60e51b81526020600482015260166024820152600080516020610cec833981519152604482015290519081900360640190fd5b6000828152600360205260409020546001600160a01b0316338114610459576040805162461bcd60e51b815260206004820152601860248201527721b0b73737ba1031329031b0b63632b210313c903ab9b2b960411b604482015290519081900360640190fd5b600083815260036020819052604082206002015460ff169081111561047a57fe5b146104cc576040805162461bcd60e51b815260206004820152601860248201527f5468652073746174652073686f756c642062652049646c650000000000000000604482015290519081900360640190fd5b50506000908152600360205260409020600201805460ff19166001179055565b6000818060005411610533576040805162461bcd60e51b81526020600482015260166024820152600080516020610cec833981519152604482015290519081900360640190fd5b60025b60008481526003602081905260409091206002015460ff169081111561055857fe5b1491505b50919050565b60008180600054116105a9576040805162461bcd60e51b81526020600482015260166024820152600080516020610cec833981519152604482015290519081900360640190fd5b6001610536565b60005481565b60008180600054116105fd576040805162461bcd60e51b81526020600482015260166024820152600080516020610cec833981519152604482015290519081900360640190fd5b61060681610934565b610648576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b505060009081526002602052604090205490565b60008180600054116106a3576040805162461bcd60e51b81526020600482015260166024820152600080516020610cec833981519152604482015290519081900360640190fd5b600083815260036020819052604082206002015460ff16908111156106c457fe5b14156106d9576349646c6560e01b915061055c565b600160008481526003602081905260409091206002015460ff16908111156106fd57fe5b141561071857695375626d697474696e6760b01b915061055c565b600260008481526003602081905260409091206002015460ff169081111561073c57fe5b1415610758576a446f776e6c6f6164696e6760a81b915061055c565b60008381526003602081905260409091206002015460ff168181111561077a57fe5b14156107935767119a5b9a5cda195960c21b915061055c565b6040805162461bcd60e51b8152602060048201526012602482015271556e7265636f676e697a656420737461746560701b604482015290519081900360640190fd5b60008060006107e2610ccd565b600086815260036020818152604092839020835160608101855281546001600160a01b031681526001820154928101929092526002810154919390929084019160ff169081111561082f57fe5b600381111561083a57fe5b905250905060008060008881526003602081905260409091206002015460ff169081111561086457fe5b141561087457506349646c6560e01b5b600160008881526003602081905260409091206002015460ff169081111561089857fe5b14156108ae5750695375626d697474696e6760b01b5b600260008881526003602081905260409091206002015460ff16908111156108d257fe5b14156108e957506a446f776e6c6f6164696e6760a81b5b60008781526003602081905260409091206002015460ff168181111561090b57fe5b141561091f575067119a5b9a5cda195960c21b5b81516020909201519197919650945092505050565b60009081526001602052604090205460ff1690565b6000908152600160209081526040808320805460ff191690556002909152812055565b8080600054116109b1576040805162461bcd60e51b81526020600482015260166024820152600080516020610cec833981519152604482015290519081900360640190fd5b6000828152600360205260409020546001600160a01b0316338114610a18576040805162461bcd60e51b815260206004820152601860248201527721b0b73737ba1031329031b0b63632b210313c903ab9b2b960411b604482015290519081900360640190fd5b600260008481526003602081905260409091206002015460ff1690811115610a3c57fe5b14610a8e576040805162461bcd60e51b815260206004820152601f60248201527f5468652073746174652073686f756c6420626520446f776e6c6f6164696e6700604482015290519081900360640190fd5b6000838152600360208190526040909120600201805460ff19169091179055610ab683610949565b6000838152600360208190526040909120600201547fbdd51eb9fb70bb6e48865170e5931f9a9ad837dd15a4749be5eb0de6e645856191859160ff1690811115610afc57fe5b6040805192835260ff90911660208301528051918290030190a1505050565b6000818060005411610b62576040805162461bcd60e51b81526020600482015260166024820152600080516020610cec833981519152604482015290519081900360640190fd5b6003610536565b50506040805160008082526020820190815281830190925291565b818060005411610bc9576040805162461bcd60e51b81526020600482015260166024820152600080516020610cec833981519152604482015290519081900360640190fd5b6000838152600360205260409020546001600160a01b0316338114610c30576040805162461bcd60e51b815260206004820152601860248201527721b0b73737ba1031329031b0b63632b210313c903ab9b2b960411b604482015290519081900360640190fd5b600160008581526003602081905260409091206002015460ff1690811115610c5457fe5b14610ca6576040805162461bcd60e51b815260206004820152601e60248201527f5468652073746174652073686f756c64206265205375626d697474696e670000604482015290519081900360640190fd5b50506000918252600360205260409091206002808201805460ff1916909117905560010155565b6040805160608101825260008082526020820181905290918201529056fe496e646578206e6f7420696e7374616e74696174656400000000000000000000a26469706673582212202c89bf25bb66066f4916696acaac7489cda4a26f27d74a6696b601c5bb5f62cc64736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimDownloading(uint256,bytes32)": {
        "notice": "Claim Downloading for the logger test."
      },
      "claimFinished(uint256)": {
        "notice": "Claim Finished for the logger test."
      },
      "claimSubmitting(uint256)": {
        "notice": "Claim Submitting for the logger test."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 94,
        "contract": "contracts/LoggerTestInstantiator.sol:LoggerTestInstantiator",
        "label": "currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 98,
        "contract": "contracts/LoggerTestInstantiator.sol:LoggerTestInstantiator",
        "label": "active",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 102,
        "contract": "contracts/LoggerTestInstantiator.sol:LoggerTestInstantiator",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1082,
        "contract": "contracts/LoggerTestInstantiator.sol:LoggerTestInstantiator",
        "label": "instance",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(LoggerTestCtx)1078_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(state)1562": {
        "encoding": "inplace",
        "label": "enum LoggerTestInterface.state",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(LoggerTestCtx)1078_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LoggerTestInstantiator.LoggerTestCtx)",
        "numberOfBytes": "32",
        "value": "t_struct(LoggerTestCtx)1078_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LoggerTestCtx)1078_storage": {
        "encoding": "inplace",
        "label": "struct LoggerTestInstantiator.LoggerTestCtx",
        "members": [
          {
            "astId": 1073,
            "contract": "contracts/LoggerTestInstantiator.sol:LoggerTestInstantiator",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1075,
            "contract": "contracts/LoggerTestInstantiator.sol:LoggerTestInstantiator",
            "label": "submittedHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 1077,
            "contract": "contracts/LoggerTestInstantiator.sol:LoggerTestInstantiator",
            "label": "currentState",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(state)1562"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}